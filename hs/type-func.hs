-- Haskell 类型特点
--      强类型
--      静态 -在编译期确定值和表达式的类型
--      自动推到

-- 列表
--      head 第一个元素
--      tail 除第一个的其他元素
--      take n [a] 取 List 前n个元素
--      drop n [a] 删除前 n 个元素
--      列表只能保存任意长度相同类型的值，元组可以保存固定长度不同类型的值
--  元组
--      () 是一种类型，该类型只有一个值 (), 是一个0个元素的元组
--      元素的数量作为称呼元组的前缀
--      Hashkell 不能创建 1-元组
--      元素的类型+位置、数量决定元组的类型
--      fst, snd 取元组的 第一个、第二个元素

--      Haskell 的函数应用是 左关联 的， abcd: ((((a)b)c)d), 使用 () 可改变其关联顺序

-- 纯度
--      函数的行为受系统全局状态的影响，副作用本质上是一种不可见的输入或输出， 函数默认情况下都是无副作用的， 函数的结果只取决于显示传入的参数，不带副作用的函数称为纯函数， 不纯函数的签名都以 IO开头
add a b = a + b
-- 变量
--      可以使用变量来赋予表达式名字，一旦变量绑定了某个表达式，那么这个变量的值就不会改变，不允许对一个变量多次赋值

myDrop n xs = if n <= 0 || null xs
                then xs
                else myDrop (n-1) (tail xs)
--      if 后 跟一个Bool类型，true执行then，false执行else， then和else类型相同
--      整个表达式可以写成一行
myDrop2 n xs = if n <= 0 || null xs then xs else myDrop2 (n-1) (tail xs)

-- 求值
-- 惰性求值
--      可以使用 一个表达式 去代换 一个变量
--      案例 mod取模函数
isOdd n = mod n 2 == 1
--      isOdd (1+2) 分析
--      Haskell使用 非严格求值， 编译器不会 先计算 1+2的值，而是承诺可以计算出 1+2的值
--      用于追踪未求值表达式的记录被称为块 chunk, 编译器通过创建chunk来延迟表达式的求值，知道这个表达式被真正需要，如果一个表达式不被需要，它永远不会被求值
--      案例， myDrop "abcd"
--      将变量替换到表达式, 在ghci中 查看 
--      :t 2<=0 || null "abcd", 得到 2<=0 || null "abcd" :: Bool
--      2<=0 得到 False
--      :t False || null "abcd" 得到 False || null "abcd"
--      此时，如果 ||左侧为True，则不需要对右侧求值，反之，则对右侧求值
--      这一块主要了解 Haskell求值表达式的方式，惰性计算可以延迟计算直到真正需要一个值为止，因此：函数的返回值可能是一个块（被延迟计算的表达式）

-- 多态
-- 如果函数的类型签名里包含类型变量，我们称这些函数是多态的
-- 查看 fst take 的函数签名